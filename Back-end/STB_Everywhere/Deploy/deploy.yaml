apiVersion: v1
kind: Namespace
metadata:
  name: stbeverywhere
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: stbeverywhere
  labels:
    io.kompose.service: elasticsearch-data
  name: elasticsearch-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: stbeverywhere
  name: app-config
data:
  ConnectionString: Server=sqlserverdb;Database=STBEverywhereDB;User Id=sa;Password=SwN12345678;TrustServerCertificate=true
  ElasticConfigurationUri: http://elasticsearch:9200  # Changed key
---
# Elasticsearch Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: stbeverywhere
  labels:
    io.kompose.service: elasticsearch
  name: elasticsearch
spec:
  replicas: 2
  selector:
    matchLabels:
      io.kompose.service: elasticsearch
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        io.kompose.service: elasticsearch
    spec:
      containers:
        - env:
            - name: ES_JAVA_OPTS
              value: -Xms512m -Xmx512m
            - name: discovery.type
              value: single-node
            - name: xpack.security.enabled
              value: "false"
            - name: xpack.watcher.enabled
              value: "false"
          image: pikafoc/elasticsearch:latest
          name: elasticsearch
          imagePullPolicy: Always
          ports:
            - containerPort: 9200
              protocol: TCP
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
              ephemeral-storage: 1Gi
            limits:
              cpu: 1000m
              memory: 2Gi
              ephemeral-storage: 2Gi
          volumeMounts:
            - mountPath: /usr/share/elasticsearch/data
              name: elasticsearch-data
          readinessProbe:
            httpGet:
              path: /_cluster/health
              port: 9200
            initialDelaySeconds: 30
            periodSeconds: 10
          livenessProbe: 
            httpGet:
              path: /
              port: 9200
            initialDelaySeconds: 60
            periodSeconds: 30
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 10001
            runAsGroup: 10001
      restartPolicy: Always
      volumes:
        - name: elasticsearch-data
          persistentVolumeClaim:
            claimName: elasticsearch-data
---
apiVersion: v1
kind: Service
metadata:
  namespace: stbeverywhere
  labels:
    io.kompose.service: elasticsearch
  name: elasticsearch
spec:
  ports:
    - name: "9200"
      port: 9200
      targetPort: 9200
  selector:
    io.kompose.service: elasticsearch
---
# Email Service API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: stbeverywhere
  labels:
    io.kompose.service: emailservice-api
  name: emailservice-api
spec:
  replicas: 2
  selector:
    matchLabels:
      io.kompose.service: emailservice-api
  template:
    metadata:
      labels:
        io.kompose.service: emailservice-api
    spec:
      containers:
        - env:
            - name: ASPNETCORE_ENVIRONMENT
              value: Development
            - name: ConnectionStrings_ConnectionString  # Changed to underscore
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: ConnectionString
            - name: ElasticConfigurationUri  # Changed to match the ConfigMap
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: ElasticConfigurationUri
          image: pikafoc/emailservice-api:latest
          imagePullPolicy: Always
          name: emailservice-api  # Changed name
          ports:
            - containerPort: 8080
              protocol: TCP
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
              ephemeral-storage: 1Gi
            limits:
              cpu: 1000m
              memory: 2Gi
              ephemeral-storage: 2Gi
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          livenessProbe: 
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 30
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 10001
            runAsGroup: 10001
---
apiVersion: v1
kind: Service
metadata:
  namespace: stbeverywhere
  labels:
    io.kompose.service: emailservice-api
  name: emailservice-api
spec:
  ports:
    - name: "8005"
      port: 8005
      targetPort: 8080
  selector:
    io.kompose.service: emailservice-api
---
# Email Service API Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: stbeverywhere
  name: emailservice-api-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: emailservice.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: emailservice-api
            port:
              number: 8005
---
# Kibana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: stbeverywhere
  labels:
    io.kompose.service: kibana
  name: kibana
spec:
  replicas: 2
  selector:
    matchLabels:
      io.kompose.service: kibana
  template:
    metadata:
      labels:
        io.kompose.service: kibana
    spec:
      containers:
        - env:
            - name: ELASTICSEARCH_URL
              value: http://elasticsearch:9200
          image: pikafoc/kibana:latest
          name: kibana
          imagePullPolicy: Always
          ports:
            - containerPort: 5601
              protocol: TCP
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
              ephemeral-storage: 1Gi
            limits:
              cpu: 1000m
              memory: 2Gi
              ephemeral-storage: 2Gi
          readinessProbe:
            httpGet:
              path: /
              port: 5601
            initialDelaySeconds: 30
            periodSeconds: 10
          livenessProbe: 
            httpGet:
              path: /
              port: 5601
            initialDelaySeconds: 60
            periodSeconds: 30
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 10001
            runAsGroup: 10001
---
apiVersion: v1
kind: Service
metadata:
  namespace: stbeverywhere
  labels:
    io.kompose.service: kibana
  name: kibana
spec:
  ports:
    - name: "5601"
      port: 5601
      targetPort: 5601
  selector:
    io.kompose.service: kibana
---
# Kibana Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: stbeverywhere
  name: kibana-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: kibana.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kibana
            port:
              number: 5601
---
# RabbitMQ Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: stbeverywhere
  labels:
    io.kompose.service: rabbitmq
  name: rabbitmq
spec:
  replicas: 2
  selector:
    matchLabels:
      io.kompose.service: rabbitmq
  template:
    metadata:
      labels:
        io.kompose.service: rabbitmq
    spec:
      containers:
        - image: pikafoc/rabbitmq:latest
          name: rabbitmq
          imagePullPolicy: Always
          ports:
            - containerPort: 5672
              protocol: TCP
            - containerPort: 15672
              protocol: TCP
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
              ephemeral-storage: 1Gi
            limits:
              cpu: 1000m
              memory: 2Gi
              ephemeral-storage: 2Gi
          readinessProbe:
            httpGet:
              path: /api/health
              port: 15672
            initialDelaySeconds: 30
            periodSeconds: 10
          livenessProbe: 
            httpGet:
              path: /api/health
              port: 15672
            initialDelaySeconds: 60
            periodSeconds: 30
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 10001
            runAsGroup: 10001
---
apiVersion: v1
kind: Service
metadata:
  namespace: stbeverywhere
  labels:
    io.kompose.service: rabbitmq
  name: rabbitmq
spec:
  ports:
    - name: "5672"
      port: 5672
      targetPort: 5672
    - name: "15672"
      port: 15672
      targetPort: 15672
  selector:
    io.kompose.service: rabbitmq
---
# RabbitMQ Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: stbeverywhere
  name: rabbitmq-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: rabbitmq.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: rabbitmq
            port:
              number: 15672
---
# Registration API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: stbeverywhere
  labels:
    io.kompose.service: registration-api
  name: registration-api
spec:
  replicas: 2
  selector:
    matchLabels:
      io.kompose.service: registration-api
  template:
    metadata:
      labels:
        io.kompose.service: registration-api
    spec:
      containers:
        - env:
            - name: ASPNETCORE_ENVIRONMENT
              value: Development
            - name: ConnectionStrings_ConnectionString  # Changed to underscore
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: ConnectionString
            - name: ElasticConfigurationUri  # Changed to match the ConfigMap
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: ElasticConfigurationUri
          image: pikafoc/registration-api:latest
          imagePullPolicy: Always
          name: registration-api  # Changed name
          ports:
            - containerPort: 8080
              protocol: TCP
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
              ephemeral-storage: 1Gi
            limits:
              cpu: 1000m
              memory: 2Gi
              ephemeral-storage: 2Gi
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          livenessProbe: 
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 30
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 10001
            runAsGroup: 10001
---
apiVersion: v1
kind: Service
metadata:
  namespace: stbeverywhere
  labels:
    io.kompose.service: registration-api
  name: registration-api
spec:
  ports:
    - name: "8004"
      port: 8004
      targetPort: 8080
  selector:
    io.kompose.service: registration-api
---
# Registration API Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: stbeverywhere
  name: registration-api-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: registration.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: registration-api
            port:
              number: 8004
---
# SMS Service API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: stbeverywhere
  labels:
    io.kompose.service: smsservice-api
  name: smsservice-api
spec:
  replicas: 2
  selector:
    matchLabels:
      io.kompose.service: smsservice-api
  template:
    metadata:
      labels:
        io.kompose.service: smsservice-api
    spec:
      containers:
        - env:
            - name: ASPNETCORE_ENVIRONMENT
              value: Development
            - name: ConnectionStrings_ConnectionString  # Changed to underscore
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: ConnectionString
            - name: ElasticConfigurationUri  # Changed to match the ConfigMap
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: ElasticConfigurationUri
          image: pikafoc/smsservice-api:latest
          imagePullPolicy: Always
          name: smsservice-api  # Changed name
          ports:
            - containerPort: 8080
              protocol: TCP
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
              ephemeral-storage: 1Gi
            limits:
              cpu: 1000m
              memory: 2Gi
              ephemeral-storage: 2Gi
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          livenessProbe: 
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 30
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 10001
            runAsGroup: 10001
---
apiVersion: v1
kind: Service
metadata:
  namespace: stbeverywhere
  labels:
    io.kompose.service: smsservice-api
  name: smsservice-api
spec:
  ports:
    - name: "8006"
      port: 8006
      targetPort: 8080
  selector:
    io.kompose.service: smsservice-api
---
# SMS Service API Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: stbeverywhere
  name: smsservice-api-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: smsservice.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: smsservice-api
            port:
              number: 8006
---
# SQL Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: stbeverywhere
  labels:
    io.kompose.service: sqlserverdb
  name: sqlserverdb
spec:
  replicas: 2  
  selector:
    matchLabels:
      io.kompose.service: sqlserverdb
  template:
    metadata:
      labels:
        io.kompose.service: sqlserverdb
    spec:
      containers:
        - env:
            - name: ACCEPT_EULA
              value: "Y"
            - name: MSSQL_SA_PASSWORD
              value: SwN12345678
          image: pikafoc/sqlserverdb:latest
          name: sqlserverdb
          ports:
            - containerPort: 1433
              protocol: TCP
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
              ephemeral-storage: 1Gi
            limits:
              cpu: 1000m
              memory: 2Gi
              ephemeral-storage: 2Gi
          readinessProbe:
            exec:
              command:
              - /opt/mssql-tools/bin/sqlcmd
              - -S
              - localhost
              - -U
              - sa
              - -P
              - SwN12345678
              - -Q
              - "SELECT 1"
            initialDelaySeconds: 30
            periodSeconds: 10
          livenessProbe: 
            exec:
              command:
              - /opt/mssql-tools/bin/sqlcmd
              - -S
              - localhost
              - -U
              - sa
              - -P
              - SwN12345678
              - -Q
              - "SELECT 1"
            initialDelaySeconds: 60
            periodSeconds: 30
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 10001
            runAsGroup: 10001
---
apiVersion: v1
kind: Service
metadata:
  namespace: stbeverywhere
  labels:
    io.kompose.service: sqlserverdb
  name: sqlserverdb
spec:
  ports:
    - name: "1434"
      port: 1434
      targetPort: 1433
  selector:
    io.kompose.service: sqlserverdb
---
# PodDisruptionBudget for each deployment
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  namespace: stbeverywhere
  name: elasticsearch-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      io.kompose.service: elasticsearch
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  namespace: stbeverywhere
  name: emailservice-api-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      io.kompose.service: emailservice-api
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  namespace: stbeverywhere
  name: kibana-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      io.kompose.service: kibana
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  namespace: stbeverywhere
  name: rabbitmq-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      io.kompose.service: rabbitmq
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  namespace: stbeverywhere
  name: registration-api-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      io.kompose.service: registration-api
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  namespace: stbeverywhere
  name: smsservice-api-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      io.kompose.service: smsservice-api
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  namespace: stbeverywhere
  name: sqlserverdb-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      io.kompose.service: sqlserverdb
---
# Network Policies for all deployments
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  namespace: stbeverywhere
  name: allow-elasticsearch-ingress
spec:
  podSelector:
    matchLabels:
      io.kompose.service: elasticsearch
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              io.kompose.service: emailservice-api
        - podSelector:
            matchLabels:
              io.kompose.service: registration-api
        - podSelector:
            matchLabels:
              io.kompose.service: smsservice-api
        - podSelector:
            matchLabels:
              io.kompose.service: kibana
        - podSelector:
            matchLabels:
              io.kompose.service: rabbitmq
        - podSelector:
            matchLabels:
              io.kompose.service: sqlserverdb
---
# PodDisruptionBudget for each deployment
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  namespace: stbeverywhere
  name: elasticsearch-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      io.kompose.service: elasticsearch
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  namespace: stbeverywhere
  name: emailservice-api-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      io.kompose.service: emailservice-api
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  namespace: stbeverywhere
  name: kibana-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      io.kompose.service: kibana
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  namespace: stbeverywhere
  name: rabbitmq-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      io.kompose.service: rabbitmq
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  namespace: stbeverywhere
  name: registration-api-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      io.kompose.service: registration-api
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  namespace: stbeverywhere
  name: smsservice-api-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      io.kompose.service: smsservice-api
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  namespace: stbeverywhere
  name: sqlserverdb-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      io.kompose.service: sqlserverdb
# Repeat similar NetworkPolicies for other services if necessary
